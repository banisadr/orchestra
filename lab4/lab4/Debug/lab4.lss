
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d4  00800100  00000d48  00000ddc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008001d4  008001d4  00000eb0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ee0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016f2  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000060a  00000000  00000000  000027da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a3d  00000000  00000000  00002de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005a0  00000000  00000000  00003824  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c6  00000000  00000000  00003dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fdb  00000000  00000000  0000448a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00006465  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__ctors_end>
   4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   c:	0c 94 c1 01 	jmp	0x382	; 0x382 <__vector_3>
  10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  14:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  18:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  1c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  20:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  24:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  28:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__vector_10>
  2c:	0c 94 4c 03 	jmp	0x698	; 0x698 <__vector_11>
  30:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  34:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  3c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  44:	0c 94 49 01 	jmp	0x292	; 0x292 <__vector_17>
  48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  4c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  54:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  58:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  5c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  60:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  64:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  68:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  6c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  70:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  74:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  78:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  7c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  80:	0c 94 b0 01 	jmp	0x360	; 0x360 <__vector_32>
  84:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  88:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  8c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  90:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  94:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  98:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  9c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>

000000ac <__trampolines_end>:
  ac:	00 01       	movw	r0, r0
  ae:	00 00       	nop
  b0:	43 01       	movw	r8, r6
  b2:	12 00       	.word	0x0012	; ????
  b4:	02 00       	.word	0x0002	; ????
  b6:	00 00       	nop
  b8:	01 43       	sbci	r16, 0x31	; 49
  ba:	00 03       	mulsu	r16, r16
  bc:	00 00       	nop
  be:	fc 00       	.word	0x00fc	; ????
  c0:	04 01       	movw	r0, r8
  c2:	03 09       	sbc	r16, r3
  c4:	04 e8       	ldi	r16, 0x84	; 132
  c6:	00 12       	cpse	r0, r16
  c8:	02 03       	mulsu	r16, r18
  ca:	09 04       	cpc	r0, r9
  cc:	e0 00       	.word	0x00e0	; ????
  ce:	06 03       	mulsu	r16, r22
  d0:	03 09       	sbc	r16, r3
  d2:	04 d6       	rcall	.+3080   	; 0xcdc <__divmodhi4+0x6>
  d4:	00 08       	sbc	r0, r0

000000d6 <string3>:
  d6:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000000e0 <string2>:
  e0:	06 03 4d 00 32 00 00 00                             ..M.2...

000000e8 <string1>:
  e8:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
  f8:	65 00 00 00                                         e...

000000fc <string0>:
  fc:	04 03 09 04                                         ....

00000100 <config1_descriptor>:
 100:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 110:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 120:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 130:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 140:	40 00 00                                            @..

00000143 <device_descriptor>:
 143:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 153:	03 01                                               ..

00000155 <endpoint_config_table>:
 155:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

00000160 <__ctors_end>:
 160:	11 24       	eor	r1, r1
 162:	1f be       	out	0x3f, r1	; 63
 164:	cf ef       	ldi	r28, 0xFF	; 255
 166:	da e0       	ldi	r29, 0x0A	; 10
 168:	de bf       	out	0x3e, r29	; 62
 16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
 16c:	11 e0       	ldi	r17, 0x01	; 1
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b1 e0       	ldi	r27, 0x01	; 1
 172:	e8 e4       	ldi	r30, 0x48	; 72
 174:	fd e0       	ldi	r31, 0x0D	; 13
 176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x10>
 178:	05 90       	lpm	r0, Z+
 17a:	0d 92       	st	X+, r0
 17c:	a4 3d       	cpi	r26, 0xD4	; 212
 17e:	b1 07       	cpc	r27, r17
 180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0xc>

00000182 <__do_clear_bss>:
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	a4 ed       	ldi	r26, 0xD4	; 212
 186:	b1 e0       	ldi	r27, 0x01	; 1
 188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
 18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
 18c:	a0 3e       	cpi	r26, 0xE0	; 224
 18e:	b2 07       	cpc	r27, r18
 190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
 192:	0e 94 3a 01 	call	0x274	; 0x274 <main>
 196:	0c 94 a2 06 	jmp	0xd44	; 0xd44 <_exit>

0000019a <__bad_interrupt>:
 19a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019e <init>:
************************************************************/

/* Initialization of Pins and System Clock */
void init(void){
	
	m_clockdivide(0); // Set to 16 MHz
 19e:	e1 e6       	ldi	r30, 0x61	; 97
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 e8       	ldi	r24, 0x80	; 128
 1a4:	80 83       	st	Z, r24
 1a6:	10 82       	st	Z, r1
	
	set(DDRB,6); // Set B6 to output
 1a8:	26 9a       	sbi	0x04, 6	; 4
	set(DDRB,0); // Set B0 to output
 1aa:	20 9a       	sbi	0x04, 0	; 4
	
	sei(); // Enable global interrupts
 1ac:	78 94       	sei
 1ae:	08 95       	ret

000001b0 <enable_timer_one>:
}

/* Initialization of Timer1 */
void enable_timer_one(void){
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29

	OCR1A = SYSTEM_SPEED/TIMER_ONE_PRESCALER/FREQ/POINTS; // Set OCR1A for initial Hz
 1b4:	e8 e8       	ldi	r30, 0x88	; 136
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	cf e6       	ldi	r28, 0x6F	; 111
 1ba:	d0 e0       	ldi	r29, 0x00	; 0
 1bc:	d1 83       	std	Z+1, r29	; 0x01
 1be:	c0 83       	st	Z, r28
	OCR1B = OCR1A/2; // Set OCR1B to half OCR1B
 1c0:	80 81       	ld	r24, Z
 1c2:	91 81       	ldd	r25, Z+1	; 0x01
 1c4:	96 95       	lsr	r25
 1c6:	87 95       	ror	r24
 1c8:	90 93 8b 00 	sts	0x008B, r25
 1cc:	80 93 8a 00 	sts	0x008A, r24
	
	set(TCCR1B,WGM13); // Set timer mode to mode 15: up to OCR1A, PWM mode
 1d0:	e1 e8       	ldi	r30, 0x81	; 129
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 61       	ori	r24, 0x10	; 16
 1d8:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
 1da:	80 81       	ld	r24, Z
 1dc:	88 60       	ori	r24, 0x08	; 8
 1de:	80 83       	st	Z, r24
	set(TCCR1A,WGM11);
 1e0:	a0 e8       	ldi	r26, 0x80	; 128
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	8c 91       	ld	r24, X
 1e6:	82 60       	ori	r24, 0x02	; 2
 1e8:	8c 93       	st	X, r24
	set(TCCR1A,WGM10);
 1ea:	8c 91       	ld	r24, X
 1ec:	81 60       	ori	r24, 0x01	; 1
 1ee:	8c 93       	st	X, r24
	
	set(TCCR1A,COM1B1); // clear B6 at TCNT1 = OCR1B, set B6 at rollover
 1f0:	8c 91       	ld	r24, X
 1f2:	80 62       	ori	r24, 0x20	; 32
 1f4:	8c 93       	st	X, r24
	clear(TCCR1A,COM1B0);
 1f6:	8c 91       	ld	r24, X
 1f8:	8f 7e       	andi	r24, 0xEF	; 239
 1fa:	8c 93       	st	X, r24
	
	clear(TCCR1B,CS12); // Set prescaler to /8
 1fc:	80 81       	ld	r24, Z
 1fe:	8b 7f       	andi	r24, 0xFB	; 251
 200:	80 83       	st	Z, r24
	set(TCCR1B,CS11);
 202:	80 81       	ld	r24, Z
 204:	82 60       	ori	r24, 0x02	; 2
 206:	80 83       	st	Z, r24
	clear(TCCR1B,CS10);
 208:	80 81       	ld	r24, Z
 20a:	8e 7f       	andi	r24, 0xFE	; 254
 20c:	80 83       	st	Z, r24
	
	set(TIMSK1,OCIE1A); // Enable interrupt TIMER1_COMPA when  TCNT1 = OCR1A
 20e:	88 81       	ld	r24, Y
 210:	82 60       	ori	r24, 0x02	; 2
 212:	88 83       	st	Y, r24
}
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <enable_timer_three>:

/* Initialization of Timer3 */
void enable_timer_three(void){

	OCR3A = SYSTEM_SPEED/TIMER_THREE_PRESCALER; // Initialize Duration to 1 second
 21a:	89 e0       	ldi	r24, 0x09	; 9
 21c:	9d e3       	ldi	r25, 0x3D	; 61
 21e:	90 93 99 00 	sts	0x0099, r25
 222:	80 93 98 00 	sts	0x0098, r24

	clear(TCCR3B, WGM33); // Set timer mode to 4: up to OCR3A
 226:	e1 e9       	ldi	r30, 0x91	; 145
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	8f 7e       	andi	r24, 0xEF	; 239
 22e:	80 83       	st	Z, r24
	set(TCCR3B,WGM32);
 230:	80 81       	ld	r24, Z
 232:	88 60       	ori	r24, 0x08	; 8
 234:	80 83       	st	Z, r24
	clear(TCCR3A,WGM31);
 236:	a0 e9       	ldi	r26, 0x90	; 144
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	8c 91       	ld	r24, X
 23c:	8d 7f       	andi	r24, 0xFD	; 253
 23e:	8c 93       	st	X, r24
	clear(TCCR3A,WGM30);
 240:	8c 91       	ld	r24, X
 242:	8e 7f       	andi	r24, 0xFE	; 254
 244:	8c 93       	st	X, r24

	set(TCCR3B,CS32); // Set prescalet to /1024
 246:	80 81       	ld	r24, Z
 248:	84 60       	ori	r24, 0x04	; 4
 24a:	80 83       	st	Z, r24
	clear(TCCR3B,CS31);
 24c:	80 81       	ld	r24, Z
 24e:	8d 7f       	andi	r24, 0xFD	; 253
 250:	80 83       	st	Z, r24
	set(TCCR3B,CS30);
 252:	80 81       	ld	r24, Z
 254:	81 60       	ori	r24, 0x01	; 1
 256:	80 83       	st	Z, r24

	set(TIMSK3,OCIE3A); // Ebable interrupt TIMER3_COMPA when TCNT3 = OCR3A
 258:	e1 e7       	ldi	r30, 0x71	; 113
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	82 60       	ori	r24, 0x02	; 2
 260:	80 83       	st	Z, r24
 262:	08 95       	ret

00000264 <enable_wireless>:
}

/* Initialization of wireless */
void enable_wireless(void){
	
	m_bus_init(); // Enable mBUS
 264:	0e 94 43 02 	call	0x486	; 0x486 <m_bus_init>
	
	m_rf_open(CHANNEL,RXADDRESS,PACKET_LENGTH); // Configure mRF
 268:	43 e0       	ldi	r20, 0x03	; 3
 26a:	6c e7       	ldi	r22, 0x7C	; 124
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <m_rf_open>
 272:	08 95       	ret

00000274 <main>:
Main Loop
************************************************************/
int main(void)
{
	/* Confirm Power */
	m_red(ON);
 274:	6e 9a       	sbi	0x0d, 6	; 13
 276:	76 98       	cbi	0x0e, 6	; 14

	/* Initializations */
	init(); // Set pins, clock speed, enable interrupts 
 278:	0e 94 cf 00 	call	0x19e	; 0x19e <init>
	enable_timer_one(); // Configure timer one
 27c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <enable_timer_one>
	enable_timer_three(); // Configure timer three
 280:	0e 94 0d 01 	call	0x21a	; 0x21a <enable_timer_three>
	enable_wireless(); // Configure wireless module
 284:	0e 94 32 01 	call	0x264	; 0x264 <enable_wireless>
	//enable_usb(); // Configure USB Communications

	/* Confirm successful initialization(s) */
	m_green(ON);
 288:	6a 9a       	sbi	0x0d, 2	; 13
 28a:	72 98       	cbi	0x0e, 2	; 14
	m_red(OFF);
 28c:	6e 9a       	sbi	0x0d, 6	; 13
 28e:	76 9a       	sbi	0x0e, 6	; 14

	/* Run */
	while (1){}
 290:	ff cf       	rjmp	.-2      	; 0x290 <main+0x1c>

00000292 <__vector_17>:
/************************************************************
Interrupts
************************************************************/

/* Timer1 OCR1A interrupt */
ISR(TIMER1_COMPA_vect){
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	2f 93       	push	r18
 29e:	3f 93       	push	r19
 2a0:	4f 93       	push	r20
 2a2:	5f 93       	push	r21
 2a4:	6f 93       	push	r22
 2a6:	7f 93       	push	r23
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
 2ac:	af 93       	push	r26
 2ae:	bf 93       	push	r27
 2b0:	ef 93       	push	r30
 2b2:	ff 93       	push	r31

	if(duration){ // If there is a duration, create sine wave
 2b4:	80 91 d6 01 	lds	r24, 0x01D6
 2b8:	90 91 d7 01 	lds	r25, 0x01D7
 2bc:	89 2b       	or	r24, r25
 2be:	a9 f1       	breq	.+106    	; 0x32a <__vector_17+0x98>
		OCR1B = (sTable[counter]*OCR1A)/STABLEMAX;
 2c0:	40 91 88 00 	lds	r20, 0x0088
 2c4:	50 91 89 00 	lds	r21, 0x0089
 2c8:	e0 91 d8 01 	lds	r30, 0x01D8
 2cc:	f0 91 d9 01 	lds	r31, 0x01D9
 2d0:	ee 0f       	add	r30, r30
 2d2:	ff 1f       	adc	r31, r31
 2d4:	e0 50       	subi	r30, 0x00	; 0
 2d6:	ff 4f       	sbci	r31, 0xFF	; 255
 2d8:	80 81       	ld	r24, Z
 2da:	91 81       	ldd	r25, Z+1	; 0x01
 2dc:	48 9f       	mul	r20, r24
 2de:	90 01       	movw	r18, r0
 2e0:	49 9f       	mul	r20, r25
 2e2:	30 0d       	add	r19, r0
 2e4:	58 9f       	mul	r21, r24
 2e6:	30 0d       	add	r19, r0
 2e8:	11 24       	eor	r1, r1
 2ea:	36 95       	lsr	r19
 2ec:	27 95       	ror	r18
 2ee:	36 95       	lsr	r19
 2f0:	27 95       	ror	r18
 2f2:	ab e7       	ldi	r26, 0x7B	; 123
 2f4:	b4 e1       	ldi	r27, 0x14	; 20
 2f6:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__umulhisi3>
 2fa:	96 95       	lsr	r25
 2fc:	87 95       	ror	r24
 2fe:	90 93 8b 00 	sts	0x008B, r25
 302:	80 93 8a 00 	sts	0x008A, r24
		counter++;
 306:	80 91 d8 01 	lds	r24, 0x01D8
 30a:	90 91 d9 01 	lds	r25, 0x01D9
 30e:	01 96       	adiw	r24, 0x01	; 1
		if (counter>=POINTS){
 310:	84 36       	cpi	r24, 0x64	; 100
 312:	91 05       	cpc	r25, r1
 314:	2c f4       	brge	.+10     	; 0x320 <__vector_17+0x8e>
/* Timer1 OCR1A interrupt */
ISR(TIMER1_COMPA_vect){

	if(duration){ // If there is a duration, create sine wave
		OCR1B = (sTable[counter]*OCR1A)/STABLEMAX;
		counter++;
 316:	90 93 d9 01 	sts	0x01D9, r25
 31a:	80 93 d8 01 	sts	0x01D8, r24
 31e:	0f c0       	rjmp	.+30     	; 0x33e <__vector_17+0xac>
		if (counter>=POINTS){
			counter = 0;
 320:	10 92 d9 01 	sts	0x01D9, r1
 324:	10 92 d8 01 	sts	0x01D8, r1
 328:	0a c0       	rjmp	.+20     	; 0x33e <__vector_17+0xac>
		}
	} else{ // If there is no duration, silence the speaker
		OCR1B = OCR1A/2;
 32a:	80 91 88 00 	lds	r24, 0x0088
 32e:	90 91 89 00 	lds	r25, 0x0089
 332:	96 95       	lsr	r25
 334:	87 95       	ror	r24
 336:	90 93 8b 00 	sts	0x008B, r25
 33a:	80 93 8a 00 	sts	0x008A, r24
	}
}
 33e:	ff 91       	pop	r31
 340:	ef 91       	pop	r30
 342:	bf 91       	pop	r27
 344:	af 91       	pop	r26
 346:	9f 91       	pop	r25
 348:	8f 91       	pop	r24
 34a:	7f 91       	pop	r23
 34c:	6f 91       	pop	r22
 34e:	5f 91       	pop	r21
 350:	4f 91       	pop	r20
 352:	3f 91       	pop	r19
 354:	2f 91       	pop	r18
 356:	0f 90       	pop	r0
 358:	0f be       	out	0x3f, r0	; 63
 35a:	0f 90       	pop	r0
 35c:	1f 90       	pop	r1
 35e:	18 95       	reti

00000360 <__vector_32>:

/* Timer3 OCR3A interrupt */
ISR(TIMER3_COMPA_vect){
 360:	1f 92       	push	r1
 362:	0f 92       	push	r0
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	0f 92       	push	r0
 368:	11 24       	eor	r1, r1

	duration = 0; // Set duration to 0: turn speaker off
 36a:	10 92 d7 01 	sts	0x01D7, r1
 36e:	10 92 d6 01 	sts	0x01D6, r1
	m_red(OFF);
 372:	6e 9a       	sbi	0x0d, 6	; 13
 374:	76 9a       	sbi	0x0e, 6	; 14
	clear(PORTB,0);
 376:	28 98       	cbi	0x05, 0	; 5
	//m_usb_tx_string("\n Timer3 Reached");
	
}
 378:	0f 90       	pop	r0
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	0f 90       	pop	r0
 37e:	1f 90       	pop	r1
 380:	18 95       	reti

00000382 <__vector_3>:

/* Wireless interrupt */
ISR(INT2_vect){
 382:	1f 92       	push	r1
 384:	0f 92       	push	r0
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	0f 92       	push	r0
 38a:	11 24       	eor	r1, r1
 38c:	2f 93       	push	r18
 38e:	3f 93       	push	r19
 390:	4f 93       	push	r20
 392:	5f 93       	push	r21
 394:	6f 93       	push	r22
 396:	7f 93       	push	r23
 398:	8f 93       	push	r24
 39a:	9f 93       	push	r25
 39c:	af 93       	push	r26
 39e:	bf 93       	push	r27
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	ef 93       	push	r30
 3a6:	ff 93       	push	r31

	m_rf_read(buffer,PACKET_LENGTH); // Read RF Signal
 3a8:	63 e0       	ldi	r22, 0x03	; 3
 3aa:	8a ed       	ldi	r24, 0xDA	; 218
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	0e 94 aa 02 	call	0x554	; 0x554 <m_rf_read>
	frequency = (*(int*)&buffer[0])/10; // Set frequency from buffer
 3b2:	ca ed       	ldi	r28, 0xDA	; 218
 3b4:	d1 e0       	ldi	r29, 0x01	; 1
 3b6:	88 81       	ld	r24, Y
 3b8:	99 81       	ldd	r25, Y+1	; 0x01
 3ba:	6a e0       	ldi	r22, 0x0A	; 10
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__divmodhi4>
 3c2:	07 2e       	mov	r0, r23
 3c4:	00 0c       	add	r0, r0
 3c6:	88 0b       	sbc	r24, r24
 3c8:	99 0b       	sbc	r25, r25
 3ca:	0e 94 72 05 	call	0xae4	; 0xae4 <__floatsisf>
 3ce:	9b 01       	movw	r18, r22
 3d0:	ac 01       	movw	r20, r24
 3d2:	60 93 c8 01 	sts	0x01C8, r22
 3d6:	70 93 c9 01 	sts	0x01C9, r23
 3da:	80 93 ca 01 	sts	0x01CA, r24
 3de:	90 93 cb 01 	sts	0x01CB, r25
	duration_buffer [0] = *&buffer[2]; // Read duration into transfer buffer
 3e2:	e4 ed       	ldi	r30, 0xD4	; 212
 3e4:	f1 e0       	ldi	r31, 0x01	; 1
 3e6:	8a 81       	ldd	r24, Y+2	; 0x02
 3e8:	80 83       	st	Z, r24
	duration = (*(int*)&duration_buffer[0]); // Set duration from buffer
 3ea:	80 81       	ld	r24, Z
 3ec:	91 81       	ldd	r25, Z+1	; 0x01
 3ee:	90 93 d7 01 	sts	0x01D7, r25
 3f2:	80 93 d6 01 	sts	0x01D6, r24
	//duration = 255;
	OCR1A = SYSTEM_SPEED/TIMER_ONE_PRESCALER/frequency/POINTS; // Adjust sine wave frequency
 3f6:	60 e0       	ldi	r22, 0x00	; 0
 3f8:	74 e2       	ldi	r23, 0x24	; 36
 3fa:	84 ef       	ldi	r24, 0xF4	; 244
 3fc:	99 e4       	ldi	r25, 0x49	; 73
 3fe:	0e 94 cf 04 	call	0x99e	; 0x99e <__divsf3>
 402:	20 e0       	ldi	r18, 0x00	; 0
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	48 ec       	ldi	r20, 0xC8	; 200
 408:	52 e4       	ldi	r21, 0x42	; 66
 40a:	0e 94 cf 04 	call	0x99e	; 0x99e <__divsf3>
 40e:	0e 94 41 05 	call	0xa82	; 0xa82 <__fixunssfsi>
 412:	70 93 89 00 	sts	0x0089, r23
 416:	60 93 88 00 	sts	0x0088, r22
	OCR3A = (SYSTEM_SPEED/TIMER_THREE_PRESCALER)*((float)duration/100); // Adjust sine wave duration
 41a:	60 91 d6 01 	lds	r22, 0x01D6
 41e:	70 91 d7 01 	lds	r23, 0x01D7
 422:	07 2e       	mov	r0, r23
 424:	00 0c       	add	r0, r0
 426:	88 0b       	sbc	r24, r24
 428:	99 0b       	sbc	r25, r25
 42a:	0e 94 72 05 	call	0xae4	; 0xae4 <__floatsisf>
 42e:	20 e0       	ldi	r18, 0x00	; 0
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	48 ec       	ldi	r20, 0xC8	; 200
 434:	52 e4       	ldi	r21, 0x42	; 66
 436:	0e 94 cf 04 	call	0x99e	; 0x99e <__divsf3>
 43a:	20 e0       	ldi	r18, 0x00	; 0
 43c:	34 e2       	ldi	r19, 0x24	; 36
 43e:	44 e7       	ldi	r20, 0x74	; 116
 440:	56 e4       	ldi	r21, 0x46	; 70
 442:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__mulsf3>
 446:	0e 94 41 05 	call	0xa82	; 0xa82 <__fixunssfsi>
 44a:	70 93 99 00 	sts	0x0099, r23
 44e:	60 93 98 00 	sts	0x0098, r22
	TCNT3 = 0x0000; // Reset Timer3 to begin from 0
 452:	10 92 95 00 	sts	0x0095, r1
 456:	10 92 94 00 	sts	0x0094, r1
	m_red(ON);
 45a:	6e 9a       	sbi	0x0d, 6	; 13
 45c:	76 98       	cbi	0x0e, 6	; 14
	set(PORTB,0);
 45e:	28 9a       	sbi	0x05, 0	; 5
	m_usb_tx_string("\n TCNT3: ");
	m_usb_tx_int(TCNT3);*/
	
	

}
 460:	ff 91       	pop	r31
 462:	ef 91       	pop	r30
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	bf 91       	pop	r27
 46a:	af 91       	pop	r26
 46c:	9f 91       	pop	r25
 46e:	8f 91       	pop	r24
 470:	7f 91       	pop	r23
 472:	6f 91       	pop	r22
 474:	5f 91       	pop	r21
 476:	4f 91       	pop	r20
 478:	3f 91       	pop	r19
 47a:	2f 91       	pop	r18
 47c:	0f 90       	pop	r0
 47e:	0f be       	out	0x3f, r0	; 63
 480:	0f 90       	pop	r0
 482:	1f 90       	pop	r1
 484:	18 95       	reti

00000486 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
 486:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
 488:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
 48a:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
 48c:	8c e0       	ldi	r24, 0x0C	; 12
 48e:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
 492:	e9 e6       	ldi	r30, 0x69	; 105
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	80 81       	ld	r24, Z
 498:	80 62       	ori	r24, 0x20	; 32
 49a:	80 83       	st	Z, r24
 49c:	80 81       	ld	r24, Z
 49e:	8f 7e       	andi	r24, 0xEF	; 239
 4a0:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
 4a2:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
 4a4:	78 94       	sei
 4a6:	08 95       	ret

000004a8 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
 4a8:	1f 93       	push	r17
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
 4ae:	18 2f       	mov	r17, r24
 4b0:	d6 2f       	mov	r29, r22
 4b2:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
 4b4:	0e 94 43 02 	call	0x486	; 0x486 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 4b8:	94 ea       	ldi	r25, 0xA4	; 164
 4ba:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
 4be:	ec eb       	ldi	r30, 0xBC	; 188
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	90 81       	ld	r25, Z
 4c4:	99 23       	and	r25, r25
 4c6:	ec f7       	brge	.-6      	; 0x4c2 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
 4c8:	90 e5       	ldi	r25, 0x50	; 80
 4ca:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
 4ce:	94 e8       	ldi	r25, 0x84	; 132
 4d0:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
 4d4:	ec eb       	ldi	r30, 0xBC	; 188
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	90 81       	ld	r25, Z
 4da:	99 23       	and	r25, r25
 4dc:	ec f7       	brge	.-6      	; 0x4d8 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
 4de:	90 91 b9 00 	lds	r25, 0x00B9
 4e2:	98 7f       	andi	r25, 0xF8	; 248
 4e4:	90 32       	cpi	r25, 0x20	; 32
 4e6:	29 f4       	brne	.+10     	; 0x4f2 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 4e8:	84 e9       	ldi	r24, 0x94	; 148
 4ea:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	2d c0       	rjmp	.+90     	; 0x54c <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 4f8:	84 e8       	ldi	r24, 0x84	; 132
 4fa:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 4fe:	ec eb       	ldi	r30, 0xBC	; 188
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	90 81       	ld	r25, Z
 504:	99 23       	and	r25, r25
 506:	ec f7       	brge	.-6      	; 0x502 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
 508:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
 50c:	84 e8       	ldi	r24, 0x84	; 132
 50e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 512:	ec eb       	ldi	r30, 0xBC	; 188
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	80 81       	ld	r24, Z
 518:	88 23       	and	r24, r24
 51a:	ec f7       	brge	.-6      	; 0x516 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
 51c:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
 520:	84 e8       	ldi	r24, 0x84	; 132
 522:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 526:	ec eb       	ldi	r30, 0xBC	; 188
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	80 81       	ld	r24, Z
 52c:	88 23       	and	r24, r24
 52e:	ec f7       	brge	.-6      	; 0x52a <m_rf_open+0x82>
	
	TWDR = packet_length;
 530:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
 534:	84 e8       	ldi	r24, 0x84	; 132
 536:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 53a:	ec eb       	ldi	r30, 0xBC	; 188
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	88 23       	and	r24, r24
 542:	ec f7       	brge	.-6      	; 0x53e <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 544:	84 e9       	ldi	r24, 0x94	; 148
 546:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
 54a:	81 e0       	ldi	r24, 0x01	; 1
}
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	1f 91       	pop	r17
 552:	08 95       	ret

00000554 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
 554:	cf 93       	push	r28
 556:	df 93       	push	r29
 558:	9c 01       	movw	r18, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 55a:	84 ea       	ldi	r24, 0xA4	; 164
 55c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 560:	ec eb       	ldi	r30, 0xBC	; 188
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	90 81       	ld	r25, Z
 566:	99 23       	and	r25, r25
 568:	ec f7       	brge	.-6      	; 0x564 <m_rf_read+0x10>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
 56a:	81 e5       	ldi	r24, 0x51	; 81
 56c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 570:	84 e8       	ldi	r24, 0x84	; 132
 572:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
 576:	ec eb       	ldi	r30, 0xBC	; 188
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	90 81       	ld	r25, Z
 57c:	99 23       	and	r25, r25
 57e:	ec f7       	brge	.-6      	; 0x57a <m_rf_read+0x26>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
 580:	80 91 b9 00 	lds	r24, 0x00B9
 584:	88 7f       	andi	r24, 0xF8	; 248
 586:	88 34       	cpi	r24, 0x48	; 72
 588:	29 f4       	brne	.+10     	; 0x594 <m_rf_read+0x40>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 58a:	84 e9       	ldi	r24, 0x94	; 148
 58c:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	41 c0       	rjmp	.+130    	; 0x616 <m_rf_read+0xc2>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
 594:	84 ec       	ldi	r24, 0xC4	; 196
 596:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
 59a:	ec eb       	ldi	r30, 0xBC	; 188
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	90 81       	ld	r25, Z
 5a0:	99 23       	and	r25, r25
 5a2:	ec f7       	brge	.-6      	; 0x59e <m_rf_read+0x4a>
	bytes = TWDR;
 5a4:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
 5a8:	46 13       	cpse	r20, r22
 5aa:	09 c0       	rjmp	.+18     	; 0x5be <m_rf_read+0x6a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
 5ac:	84 2f       	mov	r24, r20
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	01 97       	sbiw	r24, 0x01	; 1
 5b2:	18 16       	cp	r1, r24
 5b4:	19 06       	cpc	r1, r25
 5b6:	44 f0       	brlt	.+16     	; 0x5c8 <m_rf_read+0x74>
 5b8:	40 e0       	ldi	r20, 0x00	; 0
 5ba:	50 e0       	ldi	r21, 0x00	; 0
 5bc:	1a c0       	rjmp	.+52     	; 0x5f2 <m_rf_read+0x9e>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 5be:	84 e9       	ldi	r24, 0x94	; 148
 5c0:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	27 c0       	rjmp	.+78     	; 0x616 <m_rf_read+0xc2>
 5c8:	d9 01       	movw	r26, r18
 5ca:	50 e0       	ldi	r21, 0x00	; 0
 5cc:	41 50       	subi	r20, 0x01	; 1
 5ce:	51 09       	sbc	r21, r1
 5d0:	b9 01       	movw	r22, r18
 5d2:	64 0f       	add	r22, r20
 5d4:	75 1f       	adc	r23, r21
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
 5d6:	ec eb       	ldi	r30, 0xBC	; 188
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	84 ec       	ldi	r24, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
 5dc:	cb eb       	ldi	r28, 0xBB	; 187
 5de:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
 5e0:	80 83       	st	Z, r24
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
 5e2:	90 81       	ld	r25, Z
 5e4:	99 23       	and	r25, r25
 5e6:	ec f7       	brge	.-6      	; 0x5e2 <m_rf_read+0x8e>
		buffer[i] = TWDR;
 5e8:	98 81       	ld	r25, Y
 5ea:	9d 93       	st	X+, r25
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
 5ec:	a6 17       	cp	r26, r22
 5ee:	b7 07       	cpc	r27, r23
 5f0:	b9 f7       	brne	.-18     	; 0x5e0 <m_rf_read+0x8c>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
 5f2:	84 e8       	ldi	r24, 0x84	; 132
 5f4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
 5f8:	ec eb       	ldi	r30, 0xBC	; 188
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	90 81       	ld	r25, Z
 5fe:	99 23       	and	r25, r25
 600:	ec f7       	brge	.-6      	; 0x5fc <m_rf_read+0xa8>
	buffer[i++] = TWDR;
 602:	80 91 bb 00 	lds	r24, 0x00BB
 606:	f9 01       	movw	r30, r18
 608:	e4 0f       	add	r30, r20
 60a:	f5 1f       	adc	r31, r21
 60c:	80 83       	st	Z, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 60e:	84 e9       	ldi	r24, 0x94	; 148
 610:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
 614:	81 e0       	ldi	r24, 0x01	; 1
}
 616:	df 91       	pop	r29
 618:	cf 91       	pop	r28
 61a:	08 95       	ret

0000061c <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 61c:	1f 92       	push	r1
 61e:	0f 92       	push	r0
 620:	0f b6       	in	r0, 0x3f	; 63
 622:	0f 92       	push	r0
 624:	11 24       	eor	r1, r1
 626:	8f 93       	push	r24
 628:	9f 93       	push	r25
 62a:	ef 93       	push	r30
 62c:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
 62e:	e1 ee       	ldi	r30, 0xE1	; 225
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	80 81       	ld	r24, Z
        UDINT = 0;
 634:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
 636:	83 ff       	sbrs	r24, 3
 638:	11 c0       	rjmp	.+34     	; 0x65c <__vector_10+0x40>
		UENUM = 0;
 63a:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 63e:	91 e0       	ldi	r25, 0x01	; 1
 640:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
 644:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 648:	92 e1       	ldi	r25, 0x12	; 18
 64a:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
 64e:	98 e0       	ldi	r25, 0x08	; 8
 650:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
 654:	10 92 df 01 	sts	0x01DF, r1
		cdc_line_rtsdtr = 0;
 658:	10 92 dd 01 	sts	0x01DD, r1
        }
	if (intbits & (1<<SOFI)) {
 65c:	82 ff       	sbrs	r24, 2
 65e:	13 c0       	rjmp	.+38     	; 0x686 <__vector_10+0x6a>
		if (usb_configuration) {
 660:	80 91 df 01 	lds	r24, 0x01DF
 664:	88 23       	and	r24, r24
 666:	79 f0       	breq	.+30     	; 0x686 <__vector_10+0x6a>
			t = transmit_flush_timer;
 668:	80 91 de 01 	lds	r24, 0x01DE
			if (t) {
 66c:	88 23       	and	r24, r24
 66e:	59 f0       	breq	.+22     	; 0x686 <__vector_10+0x6a>
				transmit_flush_timer = --t;
 670:	81 50       	subi	r24, 0x01	; 1
 672:	80 93 de 01 	sts	0x01DE, r24
				if (!t) {
 676:	81 11       	cpse	r24, r1
 678:	06 c0       	rjmp	.+12     	; 0x686 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
 67a:	84 e0       	ldi	r24, 0x04	; 4
 67c:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
 680:	8a e3       	ldi	r24, 0x3A	; 58
 682:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 686:	ff 91       	pop	r31
 688:	ef 91       	pop	r30
 68a:	9f 91       	pop	r25
 68c:	8f 91       	pop	r24
 68e:	0f 90       	pop	r0
 690:	0f be       	out	0x3f, r0	; 63
 692:	0f 90       	pop	r0
 694:	1f 90       	pop	r1
 696:	18 95       	reti

00000698 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 698:	1f 92       	push	r1
 69a:	0f 92       	push	r0
 69c:	0f b6       	in	r0, 0x3f	; 63
 69e:	0f 92       	push	r0
 6a0:	11 24       	eor	r1, r1
 6a2:	0f 93       	push	r16
 6a4:	1f 93       	push	r17
 6a6:	2f 93       	push	r18
 6a8:	3f 93       	push	r19
 6aa:	4f 93       	push	r20
 6ac:	5f 93       	push	r21
 6ae:	6f 93       	push	r22
 6b0:	7f 93       	push	r23
 6b2:	8f 93       	push	r24
 6b4:	9f 93       	push	r25
 6b6:	af 93       	push	r26
 6b8:	bf 93       	push	r27
 6ba:	cf 93       	push	r28
 6bc:	df 93       	push	r29
 6be:	ef 93       	push	r30
 6c0:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 6c2:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 6c6:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 6ca:	83 ff       	sbrs	r24, 3
 6cc:	4c c1       	rjmp	.+664    	; 0x966 <__vector_11+0x2ce>
                bmRequestType = UEDATX;
 6ce:	e1 ef       	ldi	r30, 0xF1	; 241
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	60 81       	ld	r22, Z
                bRequest = UEDATX;
 6d4:	80 81       	ld	r24, Z
                wValue = UEDATX;
 6d6:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
 6d8:	90 81       	ld	r25, Z
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	39 2b       	or	r19, r25
                wIndex = UEDATX;
 6de:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
 6e0:	90 81       	ld	r25, Z
 6e2:	50 e0       	ldi	r21, 0x00	; 0
 6e4:	59 2b       	or	r21, r25
                wLength = UEDATX;
 6e6:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
 6e8:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 6ea:	92 ef       	ldi	r25, 0xF2	; 242
 6ec:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
 6f0:	86 30       	cpi	r24, 0x06	; 6
 6f2:	09 f0       	breq	.+2      	; 0x6f6 <__vector_11+0x5e>
 6f4:	58 c0       	rjmp	.+176    	; 0x7a6 <__vector_11+0x10e>
 6f6:	04 c0       	rjmp	.+8      	; 0x700 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 6f8:	81 e2       	ldi	r24, 0x21	; 33
 6fa:	80 93 eb 00 	sts	0x00EB, r24
					return;
 6fe:	3a c1       	rjmp	.+628    	; 0x974 <__vector_11+0x2dc>
 700:	66 e0       	ldi	r22, 0x06	; 6
 702:	8c ea       	ldi	r24, 0xAC	; 172
 704:	90 e0       	ldi	r25, 0x00	; 0
				}
				desc_val = pgm_read_word(list);
 706:	fc 01       	movw	r30, r24
 708:	a5 91       	lpm	r26, Z+
 70a:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
 70c:	2a 17       	cp	r18, r26
 70e:	3b 07       	cpc	r19, r27
 710:	11 f0       	breq	.+4      	; 0x716 <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
 712:	07 96       	adiw	r24, 0x07	; 7
					continue;
 714:	23 c0       	rjmp	.+70     	; 0x75c <__vector_11+0xc4>
				}
				list += 2;
 716:	fc 01       	movw	r30, r24
 718:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
 71a:	a5 91       	lpm	r26, Z+
 71c:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
 71e:	4a 17       	cp	r20, r26
 720:	5b 07       	cpc	r21, r27
 722:	11 f0       	breq	.+4      	; 0x728 <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
 724:	07 96       	adiw	r24, 0x07	; 7
					continue;
 726:	1a c0       	rjmp	.+52     	; 0x75c <__vector_11+0xc4>
				}
				list += 2;
 728:	fc 01       	movw	r30, r24
 72a:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 72c:	45 91       	lpm	r20, Z+
 72e:	54 91       	lpm	r21, Z
				list += 2;
 730:	fc 01       	movw	r30, r24
 732:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 734:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
 736:	87 2f       	mov	r24, r23
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 73c:	8f 3f       	cpi	r24, 0xFF	; 255
 73e:	91 05       	cpc	r25, r1
 740:	19 f0       	breq	.+6      	; 0x748 <__vector_11+0xb0>
 742:	10 f0       	brcs	.+4      	; 0x748 <__vector_11+0xb0>
 744:	8f ef       	ldi	r24, 0xFF	; 255
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	82 17       	cp	r24, r18
 74a:	08 f4       	brcc	.+2      	; 0x74e <__vector_11+0xb6>
 74c:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 74e:	a8 ee       	ldi	r26, 0xE8	; 232
 750:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 752:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 754:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
 756:	c1 ef       	ldi	r28, 0xF1	; 241
 758:	d0 e0       	ldi	r29, 0x00	; 0
 75a:	03 c0       	rjmp	.+6      	; 0x762 <__vector_11+0xca>
 75c:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 75e:	99 f6       	brne	.-90     	; 0x706 <__vector_11+0x6e>
 760:	cb cf       	rjmp	.-106    	; 0x6f8 <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 762:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 764:	98 2f       	mov	r25, r24
 766:	95 70       	andi	r25, 0x05	; 5
 768:	e1 f3       	breq	.-8      	; 0x762 <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
 76a:	82 fd       	sbrc	r24, 2
 76c:	03 c1       	rjmp	.+518    	; 0x974 <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 76e:	32 2f       	mov	r19, r18
 770:	21 31       	cpi	r18, 0x11	; 17
 772:	08 f0       	brcs	.+2      	; 0x776 <__vector_11+0xde>
 774:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
 776:	33 23       	and	r19, r19
 778:	09 f4       	brne	.+2      	; 0x77c <__vector_11+0xe4>
 77a:	f9 c0       	rjmp	.+498    	; 0x96e <__vector_11+0x2d6>
 77c:	fa 01       	movw	r30, r20
 77e:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
 780:	94 91       	lpm	r25, Z
 782:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 784:	81 50       	subi	r24, 0x01	; 1
 786:	31 96       	adiw	r30, 0x01	; 1
 788:	81 11       	cpse	r24, r1
 78a:	fa cf       	rjmp	.-12     	; 0x780 <__vector_11+0xe8>
 78c:	8f ef       	ldi	r24, 0xFF	; 255
 78e:	83 0f       	add	r24, r19
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	01 96       	adiw	r24, 0x01	; 1
 794:	48 0f       	add	r20, r24
 796:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 798:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 79a:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 79c:	21 11       	cpse	r18, r1
 79e:	e1 cf       	rjmp	.-62     	; 0x762 <__vector_11+0xca>
 7a0:	30 31       	cpi	r19, 0x10	; 16
 7a2:	f9 f2       	breq	.-66     	; 0x762 <__vector_11+0xca>
 7a4:	e7 c0       	rjmp	.+462    	; 0x974 <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 7a6:	85 30       	cpi	r24, 0x05	; 5
 7a8:	61 f4       	brne	.+24     	; 0x7c2 <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 7aa:	8e ef       	ldi	r24, 0xFE	; 254
 7ac:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 7b0:	e8 ee       	ldi	r30, 0xE8	; 232
 7b2:	f0 e0       	ldi	r31, 0x00	; 0
 7b4:	80 81       	ld	r24, Z
 7b6:	80 ff       	sbrs	r24, 0
 7b8:	fd cf       	rjmp	.-6      	; 0x7b4 <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 7ba:	20 68       	ori	r18, 0x80	; 128
 7bc:	20 93 e3 00 	sts	0x00E3, r18
			return;
 7c0:	d9 c0       	rjmp	.+434    	; 0x974 <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 7c2:	89 30       	cpi	r24, 0x09	; 9
 7c4:	09 f0       	breq	.+2      	; 0x7c8 <__vector_11+0x130>
 7c6:	35 c0       	rjmp	.+106    	; 0x832 <__vector_11+0x19a>
 7c8:	61 11       	cpse	r22, r1
 7ca:	cd c0       	rjmp	.+410    	; 0x966 <__vector_11+0x2ce>
			usb_configuration = wValue;
 7cc:	20 93 df 01 	sts	0x01DF, r18
			cdc_line_rtsdtr = 0;
 7d0:	10 92 dd 01 	sts	0x01DD, r1
			transmit_flush_timer = 0;
 7d4:	10 92 de 01 	sts	0x01DE, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 7d8:	8e ef       	ldi	r24, 0xFE	; 254
 7da:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 7de:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
 7e0:	25 e5       	ldi	r18, 0x55	; 85
 7e2:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
 7e4:	c9 ee       	ldi	r28, 0xE9	; 233
 7e6:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
 7e8:	ab ee       	ldi	r26, 0xEB	; 235
 7ea:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
 7ec:	0c ee       	ldi	r16, 0xEC	; 236
 7ee:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
 7f0:	6d ee       	ldi	r22, 0xED	; 237
 7f2:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 7f4:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
 7f6:	a9 01       	movw	r20, r18
 7f8:	4f 5f       	subi	r20, 0xFF	; 255
 7fa:	5f 4f       	sbci	r21, 0xFF	; 255
 7fc:	f9 01       	movw	r30, r18
 7fe:	94 91       	lpm	r25, Z
				UECONX = en;
 800:	9c 93       	st	X, r25
				if (en) {
 802:	99 23       	and	r25, r25
 804:	61 f0       	breq	.+24     	; 0x81e <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
 806:	fa 01       	movw	r30, r20
 808:	44 91       	lpm	r20, Z
 80a:	f8 01       	movw	r30, r16
 80c:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
 80e:	f9 01       	movw	r30, r18
 810:	32 96       	adiw	r30, 0x02	; 2
 812:	94 91       	lpm	r25, Z
 814:	2d 5f       	subi	r18, 0xFD	; 253
 816:	3f 4f       	sbci	r19, 0xFF	; 255
 818:	fb 01       	movw	r30, r22
 81a:	90 83       	st	Z, r25
 81c:	01 c0       	rjmp	.+2      	; 0x820 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
 81e:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 820:	8f 5f       	subi	r24, 0xFF	; 255
 822:	85 30       	cpi	r24, 0x05	; 5
 824:	39 f7       	brne	.-50     	; 0x7f4 <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 826:	ea ee       	ldi	r30, 0xEA	; 234
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	8e e1       	ldi	r24, 0x1E	; 30
 82c:	80 83       	st	Z, r24
        		UERST = 0;
 82e:	10 82       	st	Z, r1
			return;
 830:	a1 c0       	rjmp	.+322    	; 0x974 <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 832:	88 30       	cpi	r24, 0x08	; 8
 834:	81 f4       	brne	.+32     	; 0x856 <__vector_11+0x1be>
 836:	60 38       	cpi	r22, 0x80	; 128
 838:	09 f0       	breq	.+2      	; 0x83c <__vector_11+0x1a4>
 83a:	95 c0       	rjmp	.+298    	; 0x966 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 83c:	e8 ee       	ldi	r30, 0xE8	; 232
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	80 81       	ld	r24, Z
 842:	80 ff       	sbrs	r24, 0
 844:	fd cf       	rjmp	.-6      	; 0x840 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 846:	80 91 df 01 	lds	r24, 0x01DF
 84a:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 84e:	8e ef       	ldi	r24, 0xFE	; 254
 850:	80 93 e8 00 	sts	0x00E8, r24
 854:	8f c0       	rjmp	.+286    	; 0x974 <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 856:	81 32       	cpi	r24, 0x21	; 33
 858:	b9 f4       	brne	.+46     	; 0x888 <__vector_11+0x1f0>
 85a:	61 3a       	cpi	r22, 0xA1	; 161
 85c:	09 f0       	breq	.+2      	; 0x860 <__vector_11+0x1c8>
 85e:	83 c0       	rjmp	.+262    	; 0x966 <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 860:	e8 ee       	ldi	r30, 0xE8	; 232
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	80 81       	ld	r24, Z
 866:	80 ff       	sbrs	r24, 0
 868:	fd cf       	rjmp	.-6      	; 0x864 <__vector_11+0x1cc>
 86a:	ec ec       	ldi	r30, 0xCC	; 204
 86c:	f1 e0       	ldi	r31, 0x01	; 1
 86e:	23 ed       	ldi	r18, 0xD3	; 211
 870:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 872:	a1 ef       	ldi	r26, 0xF1	; 241
 874:	b0 e0       	ldi	r27, 0x00	; 0
 876:	81 91       	ld	r24, Z+
 878:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 87a:	e2 17       	cp	r30, r18
 87c:	f3 07       	cpc	r31, r19
 87e:	d9 f7       	brne	.-10     	; 0x876 <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 880:	8e ef       	ldi	r24, 0xFE	; 254
 882:	80 93 e8 00 	sts	0x00E8, r24
 886:	76 c0       	rjmp	.+236    	; 0x974 <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 888:	80 32       	cpi	r24, 0x20	; 32
 88a:	d1 f4       	brne	.+52     	; 0x8c0 <__vector_11+0x228>
 88c:	61 32       	cpi	r22, 0x21	; 33
 88e:	09 f0       	breq	.+2      	; 0x892 <__vector_11+0x1fa>
 890:	6a c0       	rjmp	.+212    	; 0x966 <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 892:	e8 ee       	ldi	r30, 0xE8	; 232
 894:	f0 e0       	ldi	r31, 0x00	; 0
 896:	80 81       	ld	r24, Z
 898:	82 ff       	sbrs	r24, 2
 89a:	fd cf       	rjmp	.-6      	; 0x896 <__vector_11+0x1fe>
 89c:	ec ec       	ldi	r30, 0xCC	; 204
 89e:	f1 e0       	ldi	r31, 0x01	; 1
 8a0:	23 ed       	ldi	r18, 0xD3	; 211
 8a2:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 8a4:	a1 ef       	ldi	r26, 0xF1	; 241
 8a6:	b0 e0       	ldi	r27, 0x00	; 0
 8a8:	8c 91       	ld	r24, X
 8aa:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 8ac:	e2 17       	cp	r30, r18
 8ae:	f3 07       	cpc	r31, r19
 8b0:	d9 f7       	brne	.-10     	; 0x8a8 <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 8b2:	e8 ee       	ldi	r30, 0xE8	; 232
 8b4:	f0 e0       	ldi	r31, 0x00	; 0
 8b6:	8b ef       	ldi	r24, 0xFB	; 251
 8b8:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 8ba:	8e ef       	ldi	r24, 0xFE	; 254
 8bc:	80 83       	st	Z, r24
 8be:	5a c0       	rjmp	.+180    	; 0x974 <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 8c0:	82 32       	cpi	r24, 0x22	; 34
 8c2:	71 f4       	brne	.+28     	; 0x8e0 <__vector_11+0x248>
 8c4:	61 32       	cpi	r22, 0x21	; 33
 8c6:	09 f0       	breq	.+2      	; 0x8ca <__vector_11+0x232>
 8c8:	4e c0       	rjmp	.+156    	; 0x966 <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
 8ca:	20 93 dd 01 	sts	0x01DD, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 8ce:	e8 ee       	ldi	r30, 0xE8	; 232
 8d0:	f0 e0       	ldi	r31, 0x00	; 0
 8d2:	80 81       	ld	r24, Z
 8d4:	80 ff       	sbrs	r24, 0
 8d6:	fd cf       	rjmp	.-6      	; 0x8d2 <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 8d8:	8e ef       	ldi	r24, 0xFE	; 254
 8da:	80 93 e8 00 	sts	0x00E8, r24
 8de:	4a c0       	rjmp	.+148    	; 0x974 <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 8e0:	81 11       	cpse	r24, r1
 8e2:	1a c0       	rjmp	.+52     	; 0x918 <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 8e4:	e8 ee       	ldi	r30, 0xE8	; 232
 8e6:	f0 e0       	ldi	r31, 0x00	; 0
 8e8:	80 81       	ld	r24, Z
 8ea:	80 ff       	sbrs	r24, 0
 8ec:	fd cf       	rjmp	.-6      	; 0x8e8 <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 8ee:	62 38       	cpi	r22, 0x82	; 130
 8f0:	51 f4       	brne	.+20     	; 0x906 <__vector_11+0x26e>
				UENUM = wIndex;
 8f2:	e9 ee       	ldi	r30, 0xE9	; 233
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
 8f8:	80 91 eb 00 	lds	r24, 0x00EB
 8fc:	85 fb       	bst	r24, 5
 8fe:	88 27       	eor	r24, r24
 900:	80 f9       	bld	r24, 0
				UENUM = 0;
 902:	10 82       	st	Z, r1
 904:	01 c0       	rjmp	.+2      	; 0x908 <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 906:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 908:	e1 ef       	ldi	r30, 0xF1	; 241
 90a:	f0 e0       	ldi	r31, 0x00	; 0
 90c:	80 83       	st	Z, r24
			UEDATX = 0;
 90e:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 910:	8e ef       	ldi	r24, 0xFE	; 254
 912:	80 93 e8 00 	sts	0x00E8, r24
 916:	2e c0       	rjmp	.+92     	; 0x974 <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 918:	98 2f       	mov	r25, r24
 91a:	9d 7f       	andi	r25, 0xFD	; 253
 91c:	91 30       	cpi	r25, 0x01	; 1
 91e:	19 f5       	brne	.+70     	; 0x966 <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
 920:	62 30       	cpi	r22, 0x02	; 2
 922:	09 f5       	brne	.+66     	; 0x966 <__vector_11+0x2ce>
 924:	23 2b       	or	r18, r19
 926:	f9 f4       	brne	.+62     	; 0x966 <__vector_11+0x2ce>
			i = wIndex & 0x7F;
 928:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 92a:	9f ef       	ldi	r25, 0xFF	; 255
 92c:	94 0f       	add	r25, r20
 92e:	94 30       	cpi	r25, 0x04	; 4
 930:	d0 f4       	brcc	.+52     	; 0x966 <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 932:	9e ef       	ldi	r25, 0xFE	; 254
 934:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 938:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
 93c:	83 30       	cpi	r24, 0x03	; 3
 93e:	21 f4       	brne	.+8      	; 0x948 <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 940:	81 e2       	ldi	r24, 0x21	; 33
 942:	80 93 eb 00 	sts	0x00EB, r24
 946:	16 c0       	rjmp	.+44     	; 0x974 <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 948:	89 e1       	ldi	r24, 0x19	; 25
 94a:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	02 c0       	rjmp	.+4      	; 0x958 <__vector_11+0x2c0>
 954:	88 0f       	add	r24, r24
 956:	99 1f       	adc	r25, r25
 958:	4a 95       	dec	r20
 95a:	e2 f7       	brpl	.-8      	; 0x954 <__vector_11+0x2bc>
 95c:	ea ee       	ldi	r30, 0xEA	; 234
 95e:	f0 e0       	ldi	r31, 0x00	; 0
 960:	80 83       	st	Z, r24
					UERST = 0;
 962:	10 82       	st	Z, r1
 964:	07 c0       	rjmp	.+14     	; 0x974 <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 966:	81 e2       	ldi	r24, 0x21	; 33
 968:	80 93 eb 00 	sts	0x00EB, r24
 96c:	03 c0       	rjmp	.+6      	; 0x974 <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 96e:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 970:	21 11       	cpse	r18, r1
 972:	f7 ce       	rjmp	.-530    	; 0x762 <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 974:	ff 91       	pop	r31
 976:	ef 91       	pop	r30
 978:	df 91       	pop	r29
 97a:	cf 91       	pop	r28
 97c:	bf 91       	pop	r27
 97e:	af 91       	pop	r26
 980:	9f 91       	pop	r25
 982:	8f 91       	pop	r24
 984:	7f 91       	pop	r23
 986:	6f 91       	pop	r22
 988:	5f 91       	pop	r21
 98a:	4f 91       	pop	r20
 98c:	3f 91       	pop	r19
 98e:	2f 91       	pop	r18
 990:	1f 91       	pop	r17
 992:	0f 91       	pop	r16
 994:	0f 90       	pop	r0
 996:	0f be       	out	0x3f, r0	; 63
 998:	0f 90       	pop	r0
 99a:	1f 90       	pop	r1
 99c:	18 95       	reti

0000099e <__divsf3>:
 99e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__divsf3x>
 9a2:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__fp_round>
 9a6:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__fp_pscB>
 9aa:	58 f0       	brcs	.+22     	; 0x9c2 <__divsf3+0x24>
 9ac:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__fp_pscA>
 9b0:	40 f0       	brcs	.+16     	; 0x9c2 <__divsf3+0x24>
 9b2:	29 f4       	brne	.+10     	; 0x9be <__divsf3+0x20>
 9b4:	5f 3f       	cpi	r21, 0xFF	; 255
 9b6:	29 f0       	breq	.+10     	; 0x9c2 <__divsf3+0x24>
 9b8:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__fp_inf>
 9bc:	51 11       	cpse	r21, r1
 9be:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__fp_szero>
 9c2:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__fp_nan>

000009c6 <__divsf3x>:
 9c6:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__fp_split3>
 9ca:	68 f3       	brcs	.-38     	; 0x9a6 <__divsf3+0x8>

000009cc <__divsf3_pse>:
 9cc:	99 23       	and	r25, r25
 9ce:	b1 f3       	breq	.-20     	; 0x9bc <__divsf3+0x1e>
 9d0:	55 23       	and	r21, r21
 9d2:	91 f3       	breq	.-28     	; 0x9b8 <__divsf3+0x1a>
 9d4:	95 1b       	sub	r25, r21
 9d6:	55 0b       	sbc	r21, r21
 9d8:	bb 27       	eor	r27, r27
 9da:	aa 27       	eor	r26, r26
 9dc:	62 17       	cp	r22, r18
 9de:	73 07       	cpc	r23, r19
 9e0:	84 07       	cpc	r24, r20
 9e2:	38 f0       	brcs	.+14     	; 0x9f2 <__divsf3_pse+0x26>
 9e4:	9f 5f       	subi	r25, 0xFF	; 255
 9e6:	5f 4f       	sbci	r21, 0xFF	; 255
 9e8:	22 0f       	add	r18, r18
 9ea:	33 1f       	adc	r19, r19
 9ec:	44 1f       	adc	r20, r20
 9ee:	aa 1f       	adc	r26, r26
 9f0:	a9 f3       	breq	.-22     	; 0x9dc <__divsf3_pse+0x10>
 9f2:	35 d0       	rcall	.+106    	; 0xa5e <__divsf3_pse+0x92>
 9f4:	0e 2e       	mov	r0, r30
 9f6:	3a f0       	brmi	.+14     	; 0xa06 <__divsf3_pse+0x3a>
 9f8:	e0 e8       	ldi	r30, 0x80	; 128
 9fa:	32 d0       	rcall	.+100    	; 0xa60 <__divsf3_pse+0x94>
 9fc:	91 50       	subi	r25, 0x01	; 1
 9fe:	50 40       	sbci	r21, 0x00	; 0
 a00:	e6 95       	lsr	r30
 a02:	00 1c       	adc	r0, r0
 a04:	ca f7       	brpl	.-14     	; 0x9f8 <__divsf3_pse+0x2c>
 a06:	2b d0       	rcall	.+86     	; 0xa5e <__divsf3_pse+0x92>
 a08:	fe 2f       	mov	r31, r30
 a0a:	29 d0       	rcall	.+82     	; 0xa5e <__divsf3_pse+0x92>
 a0c:	66 0f       	add	r22, r22
 a0e:	77 1f       	adc	r23, r23
 a10:	88 1f       	adc	r24, r24
 a12:	bb 1f       	adc	r27, r27
 a14:	26 17       	cp	r18, r22
 a16:	37 07       	cpc	r19, r23
 a18:	48 07       	cpc	r20, r24
 a1a:	ab 07       	cpc	r26, r27
 a1c:	b0 e8       	ldi	r27, 0x80	; 128
 a1e:	09 f0       	breq	.+2      	; 0xa22 <__divsf3_pse+0x56>
 a20:	bb 0b       	sbc	r27, r27
 a22:	80 2d       	mov	r24, r0
 a24:	bf 01       	movw	r22, r30
 a26:	ff 27       	eor	r31, r31
 a28:	93 58       	subi	r25, 0x83	; 131
 a2a:	5f 4f       	sbci	r21, 0xFF	; 255
 a2c:	3a f0       	brmi	.+14     	; 0xa3c <__divsf3_pse+0x70>
 a2e:	9e 3f       	cpi	r25, 0xFE	; 254
 a30:	51 05       	cpc	r21, r1
 a32:	78 f0       	brcs	.+30     	; 0xa52 <__divsf3_pse+0x86>
 a34:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__fp_inf>
 a38:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__fp_szero>
 a3c:	5f 3f       	cpi	r21, 0xFF	; 255
 a3e:	e4 f3       	brlt	.-8      	; 0xa38 <__divsf3_pse+0x6c>
 a40:	98 3e       	cpi	r25, 0xE8	; 232
 a42:	d4 f3       	brlt	.-12     	; 0xa38 <__divsf3_pse+0x6c>
 a44:	86 95       	lsr	r24
 a46:	77 95       	ror	r23
 a48:	67 95       	ror	r22
 a4a:	b7 95       	ror	r27
 a4c:	f7 95       	ror	r31
 a4e:	9f 5f       	subi	r25, 0xFF	; 255
 a50:	c9 f7       	brne	.-14     	; 0xa44 <__divsf3_pse+0x78>
 a52:	88 0f       	add	r24, r24
 a54:	91 1d       	adc	r25, r1
 a56:	96 95       	lsr	r25
 a58:	87 95       	ror	r24
 a5a:	97 f9       	bld	r25, 7
 a5c:	08 95       	ret
 a5e:	e1 e0       	ldi	r30, 0x01	; 1
 a60:	66 0f       	add	r22, r22
 a62:	77 1f       	adc	r23, r23
 a64:	88 1f       	adc	r24, r24
 a66:	bb 1f       	adc	r27, r27
 a68:	62 17       	cp	r22, r18
 a6a:	73 07       	cpc	r23, r19
 a6c:	84 07       	cpc	r24, r20
 a6e:	ba 07       	cpc	r27, r26
 a70:	20 f0       	brcs	.+8      	; 0xa7a <__divsf3_pse+0xae>
 a72:	62 1b       	sub	r22, r18
 a74:	73 0b       	sbc	r23, r19
 a76:	84 0b       	sbc	r24, r20
 a78:	ba 0b       	sbc	r27, r26
 a7a:	ee 1f       	adc	r30, r30
 a7c:	88 f7       	brcc	.-30     	; 0xa60 <__divsf3_pse+0x94>
 a7e:	e0 95       	com	r30
 a80:	08 95       	ret

00000a82 <__fixunssfsi>:
 a82:	0e 94 dd 05 	call	0xbba	; 0xbba <__fp_splitA>
 a86:	88 f0       	brcs	.+34     	; 0xaaa <__fixunssfsi+0x28>
 a88:	9f 57       	subi	r25, 0x7F	; 127
 a8a:	98 f0       	brcs	.+38     	; 0xab2 <__fixunssfsi+0x30>
 a8c:	b9 2f       	mov	r27, r25
 a8e:	99 27       	eor	r25, r25
 a90:	b7 51       	subi	r27, 0x17	; 23
 a92:	b0 f0       	brcs	.+44     	; 0xac0 <__fixunssfsi+0x3e>
 a94:	e1 f0       	breq	.+56     	; 0xace <__fixunssfsi+0x4c>
 a96:	66 0f       	add	r22, r22
 a98:	77 1f       	adc	r23, r23
 a9a:	88 1f       	adc	r24, r24
 a9c:	99 1f       	adc	r25, r25
 a9e:	1a f0       	brmi	.+6      	; 0xaa6 <__fixunssfsi+0x24>
 aa0:	ba 95       	dec	r27
 aa2:	c9 f7       	brne	.-14     	; 0xa96 <__fixunssfsi+0x14>
 aa4:	14 c0       	rjmp	.+40     	; 0xace <__fixunssfsi+0x4c>
 aa6:	b1 30       	cpi	r27, 0x01	; 1
 aa8:	91 f0       	breq	.+36     	; 0xace <__fixunssfsi+0x4c>
 aaa:	0e 94 f7 05 	call	0xbee	; 0xbee <__fp_zero>
 aae:	b1 e0       	ldi	r27, 0x01	; 1
 ab0:	08 95       	ret
 ab2:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__fp_zero>
 ab6:	67 2f       	mov	r22, r23
 ab8:	78 2f       	mov	r23, r24
 aba:	88 27       	eor	r24, r24
 abc:	b8 5f       	subi	r27, 0xF8	; 248
 abe:	39 f0       	breq	.+14     	; 0xace <__fixunssfsi+0x4c>
 ac0:	b9 3f       	cpi	r27, 0xF9	; 249
 ac2:	cc f3       	brlt	.-14     	; 0xab6 <__fixunssfsi+0x34>
 ac4:	86 95       	lsr	r24
 ac6:	77 95       	ror	r23
 ac8:	67 95       	ror	r22
 aca:	b3 95       	inc	r27
 acc:	d9 f7       	brne	.-10     	; 0xac4 <__fixunssfsi+0x42>
 ace:	3e f4       	brtc	.+14     	; 0xade <__fixunssfsi+0x5c>
 ad0:	90 95       	com	r25
 ad2:	80 95       	com	r24
 ad4:	70 95       	com	r23
 ad6:	61 95       	neg	r22
 ad8:	7f 4f       	sbci	r23, 0xFF	; 255
 ada:	8f 4f       	sbci	r24, 0xFF	; 255
 adc:	9f 4f       	sbci	r25, 0xFF	; 255
 ade:	08 95       	ret

00000ae0 <__floatunsisf>:
 ae0:	e8 94       	clt
 ae2:	09 c0       	rjmp	.+18     	; 0xaf6 <__floatsisf+0x12>

00000ae4 <__floatsisf>:
 ae4:	97 fb       	bst	r25, 7
 ae6:	3e f4       	brtc	.+14     	; 0xaf6 <__floatsisf+0x12>
 ae8:	90 95       	com	r25
 aea:	80 95       	com	r24
 aec:	70 95       	com	r23
 aee:	61 95       	neg	r22
 af0:	7f 4f       	sbci	r23, 0xFF	; 255
 af2:	8f 4f       	sbci	r24, 0xFF	; 255
 af4:	9f 4f       	sbci	r25, 0xFF	; 255
 af6:	99 23       	and	r25, r25
 af8:	a9 f0       	breq	.+42     	; 0xb24 <__stack+0x25>
 afa:	f9 2f       	mov	r31, r25
 afc:	96 e9       	ldi	r25, 0x96	; 150
 afe:	bb 27       	eor	r27, r27
 b00:	93 95       	inc	r25
 b02:	f6 95       	lsr	r31
 b04:	87 95       	ror	r24
 b06:	77 95       	ror	r23
 b08:	67 95       	ror	r22
 b0a:	b7 95       	ror	r27
 b0c:	f1 11       	cpse	r31, r1
 b0e:	f8 cf       	rjmp	.-16     	; 0xb00 <__stack+0x1>
 b10:	fa f4       	brpl	.+62     	; 0xb50 <__stack+0x51>
 b12:	bb 0f       	add	r27, r27
 b14:	11 f4       	brne	.+4      	; 0xb1a <__stack+0x1b>
 b16:	60 ff       	sbrs	r22, 0
 b18:	1b c0       	rjmp	.+54     	; 0xb50 <__stack+0x51>
 b1a:	6f 5f       	subi	r22, 0xFF	; 255
 b1c:	7f 4f       	sbci	r23, 0xFF	; 255
 b1e:	8f 4f       	sbci	r24, 0xFF	; 255
 b20:	9f 4f       	sbci	r25, 0xFF	; 255
 b22:	16 c0       	rjmp	.+44     	; 0xb50 <__stack+0x51>
 b24:	88 23       	and	r24, r24
 b26:	11 f0       	breq	.+4      	; 0xb2c <__stack+0x2d>
 b28:	96 e9       	ldi	r25, 0x96	; 150
 b2a:	11 c0       	rjmp	.+34     	; 0xb4e <__stack+0x4f>
 b2c:	77 23       	and	r23, r23
 b2e:	21 f0       	breq	.+8      	; 0xb38 <__stack+0x39>
 b30:	9e e8       	ldi	r25, 0x8E	; 142
 b32:	87 2f       	mov	r24, r23
 b34:	76 2f       	mov	r23, r22
 b36:	05 c0       	rjmp	.+10     	; 0xb42 <__stack+0x43>
 b38:	66 23       	and	r22, r22
 b3a:	71 f0       	breq	.+28     	; 0xb58 <__stack+0x59>
 b3c:	96 e8       	ldi	r25, 0x86	; 134
 b3e:	86 2f       	mov	r24, r22
 b40:	70 e0       	ldi	r23, 0x00	; 0
 b42:	60 e0       	ldi	r22, 0x00	; 0
 b44:	2a f0       	brmi	.+10     	; 0xb50 <__stack+0x51>
 b46:	9a 95       	dec	r25
 b48:	66 0f       	add	r22, r22
 b4a:	77 1f       	adc	r23, r23
 b4c:	88 1f       	adc	r24, r24
 b4e:	da f7       	brpl	.-10     	; 0xb46 <__stack+0x47>
 b50:	88 0f       	add	r24, r24
 b52:	96 95       	lsr	r25
 b54:	87 95       	ror	r24
 b56:	97 f9       	bld	r25, 7
 b58:	08 95       	ret

00000b5a <__fp_inf>:
 b5a:	97 f9       	bld	r25, 7
 b5c:	9f 67       	ori	r25, 0x7F	; 127
 b5e:	80 e8       	ldi	r24, 0x80	; 128
 b60:	70 e0       	ldi	r23, 0x00	; 0
 b62:	60 e0       	ldi	r22, 0x00	; 0
 b64:	08 95       	ret

00000b66 <__fp_nan>:
 b66:	9f ef       	ldi	r25, 0xFF	; 255
 b68:	80 ec       	ldi	r24, 0xC0	; 192
 b6a:	08 95       	ret

00000b6c <__fp_pscA>:
 b6c:	00 24       	eor	r0, r0
 b6e:	0a 94       	dec	r0
 b70:	16 16       	cp	r1, r22
 b72:	17 06       	cpc	r1, r23
 b74:	18 06       	cpc	r1, r24
 b76:	09 06       	cpc	r0, r25
 b78:	08 95       	ret

00000b7a <__fp_pscB>:
 b7a:	00 24       	eor	r0, r0
 b7c:	0a 94       	dec	r0
 b7e:	12 16       	cp	r1, r18
 b80:	13 06       	cpc	r1, r19
 b82:	14 06       	cpc	r1, r20
 b84:	05 06       	cpc	r0, r21
 b86:	08 95       	ret

00000b88 <__fp_round>:
 b88:	09 2e       	mov	r0, r25
 b8a:	03 94       	inc	r0
 b8c:	00 0c       	add	r0, r0
 b8e:	11 f4       	brne	.+4      	; 0xb94 <__fp_round+0xc>
 b90:	88 23       	and	r24, r24
 b92:	52 f0       	brmi	.+20     	; 0xba8 <__fp_round+0x20>
 b94:	bb 0f       	add	r27, r27
 b96:	40 f4       	brcc	.+16     	; 0xba8 <__fp_round+0x20>
 b98:	bf 2b       	or	r27, r31
 b9a:	11 f4       	brne	.+4      	; 0xba0 <__fp_round+0x18>
 b9c:	60 ff       	sbrs	r22, 0
 b9e:	04 c0       	rjmp	.+8      	; 0xba8 <__fp_round+0x20>
 ba0:	6f 5f       	subi	r22, 0xFF	; 255
 ba2:	7f 4f       	sbci	r23, 0xFF	; 255
 ba4:	8f 4f       	sbci	r24, 0xFF	; 255
 ba6:	9f 4f       	sbci	r25, 0xFF	; 255
 ba8:	08 95       	ret

00000baa <__fp_split3>:
 baa:	57 fd       	sbrc	r21, 7
 bac:	90 58       	subi	r25, 0x80	; 128
 bae:	44 0f       	add	r20, r20
 bb0:	55 1f       	adc	r21, r21
 bb2:	59 f0       	breq	.+22     	; 0xbca <__fp_splitA+0x10>
 bb4:	5f 3f       	cpi	r21, 0xFF	; 255
 bb6:	71 f0       	breq	.+28     	; 0xbd4 <__fp_splitA+0x1a>
 bb8:	47 95       	ror	r20

00000bba <__fp_splitA>:
 bba:	88 0f       	add	r24, r24
 bbc:	97 fb       	bst	r25, 7
 bbe:	99 1f       	adc	r25, r25
 bc0:	61 f0       	breq	.+24     	; 0xbda <__fp_splitA+0x20>
 bc2:	9f 3f       	cpi	r25, 0xFF	; 255
 bc4:	79 f0       	breq	.+30     	; 0xbe4 <__fp_splitA+0x2a>
 bc6:	87 95       	ror	r24
 bc8:	08 95       	ret
 bca:	12 16       	cp	r1, r18
 bcc:	13 06       	cpc	r1, r19
 bce:	14 06       	cpc	r1, r20
 bd0:	55 1f       	adc	r21, r21
 bd2:	f2 cf       	rjmp	.-28     	; 0xbb8 <__fp_split3+0xe>
 bd4:	46 95       	lsr	r20
 bd6:	f1 df       	rcall	.-30     	; 0xbba <__fp_splitA>
 bd8:	08 c0       	rjmp	.+16     	; 0xbea <__fp_splitA+0x30>
 bda:	16 16       	cp	r1, r22
 bdc:	17 06       	cpc	r1, r23
 bde:	18 06       	cpc	r1, r24
 be0:	99 1f       	adc	r25, r25
 be2:	f1 cf       	rjmp	.-30     	; 0xbc6 <__fp_splitA+0xc>
 be4:	86 95       	lsr	r24
 be6:	71 05       	cpc	r23, r1
 be8:	61 05       	cpc	r22, r1
 bea:	08 94       	sec
 bec:	08 95       	ret

00000bee <__fp_zero>:
 bee:	e8 94       	clt

00000bf0 <__fp_szero>:
 bf0:	bb 27       	eor	r27, r27
 bf2:	66 27       	eor	r22, r22
 bf4:	77 27       	eor	r23, r23
 bf6:	cb 01       	movw	r24, r22
 bf8:	97 f9       	bld	r25, 7
 bfa:	08 95       	ret

00000bfc <__mulsf3>:
 bfc:	0e 94 11 06 	call	0xc22	; 0xc22 <__mulsf3x>
 c00:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__fp_round>
 c04:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__fp_pscA>
 c08:	38 f0       	brcs	.+14     	; 0xc18 <__mulsf3+0x1c>
 c0a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__fp_pscB>
 c0e:	20 f0       	brcs	.+8      	; 0xc18 <__mulsf3+0x1c>
 c10:	95 23       	and	r25, r21
 c12:	11 f0       	breq	.+4      	; 0xc18 <__mulsf3+0x1c>
 c14:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__fp_inf>
 c18:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__fp_nan>
 c1c:	11 24       	eor	r1, r1
 c1e:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__fp_szero>

00000c22 <__mulsf3x>:
 c22:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__fp_split3>
 c26:	70 f3       	brcs	.-36     	; 0xc04 <__mulsf3+0x8>

00000c28 <__mulsf3_pse>:
 c28:	95 9f       	mul	r25, r21
 c2a:	c1 f3       	breq	.-16     	; 0xc1c <__mulsf3+0x20>
 c2c:	95 0f       	add	r25, r21
 c2e:	50 e0       	ldi	r21, 0x00	; 0
 c30:	55 1f       	adc	r21, r21
 c32:	62 9f       	mul	r22, r18
 c34:	f0 01       	movw	r30, r0
 c36:	72 9f       	mul	r23, r18
 c38:	bb 27       	eor	r27, r27
 c3a:	f0 0d       	add	r31, r0
 c3c:	b1 1d       	adc	r27, r1
 c3e:	63 9f       	mul	r22, r19
 c40:	aa 27       	eor	r26, r26
 c42:	f0 0d       	add	r31, r0
 c44:	b1 1d       	adc	r27, r1
 c46:	aa 1f       	adc	r26, r26
 c48:	64 9f       	mul	r22, r20
 c4a:	66 27       	eor	r22, r22
 c4c:	b0 0d       	add	r27, r0
 c4e:	a1 1d       	adc	r26, r1
 c50:	66 1f       	adc	r22, r22
 c52:	82 9f       	mul	r24, r18
 c54:	22 27       	eor	r18, r18
 c56:	b0 0d       	add	r27, r0
 c58:	a1 1d       	adc	r26, r1
 c5a:	62 1f       	adc	r22, r18
 c5c:	73 9f       	mul	r23, r19
 c5e:	b0 0d       	add	r27, r0
 c60:	a1 1d       	adc	r26, r1
 c62:	62 1f       	adc	r22, r18
 c64:	83 9f       	mul	r24, r19
 c66:	a0 0d       	add	r26, r0
 c68:	61 1d       	adc	r22, r1
 c6a:	22 1f       	adc	r18, r18
 c6c:	74 9f       	mul	r23, r20
 c6e:	33 27       	eor	r19, r19
 c70:	a0 0d       	add	r26, r0
 c72:	61 1d       	adc	r22, r1
 c74:	23 1f       	adc	r18, r19
 c76:	84 9f       	mul	r24, r20
 c78:	60 0d       	add	r22, r0
 c7a:	21 1d       	adc	r18, r1
 c7c:	82 2f       	mov	r24, r18
 c7e:	76 2f       	mov	r23, r22
 c80:	6a 2f       	mov	r22, r26
 c82:	11 24       	eor	r1, r1
 c84:	9f 57       	subi	r25, 0x7F	; 127
 c86:	50 40       	sbci	r21, 0x00	; 0
 c88:	9a f0       	brmi	.+38     	; 0xcb0 <__mulsf3_pse+0x88>
 c8a:	f1 f0       	breq	.+60     	; 0xcc8 <__mulsf3_pse+0xa0>
 c8c:	88 23       	and	r24, r24
 c8e:	4a f0       	brmi	.+18     	; 0xca2 <__mulsf3_pse+0x7a>
 c90:	ee 0f       	add	r30, r30
 c92:	ff 1f       	adc	r31, r31
 c94:	bb 1f       	adc	r27, r27
 c96:	66 1f       	adc	r22, r22
 c98:	77 1f       	adc	r23, r23
 c9a:	88 1f       	adc	r24, r24
 c9c:	91 50       	subi	r25, 0x01	; 1
 c9e:	50 40       	sbci	r21, 0x00	; 0
 ca0:	a9 f7       	brne	.-22     	; 0xc8c <__mulsf3_pse+0x64>
 ca2:	9e 3f       	cpi	r25, 0xFE	; 254
 ca4:	51 05       	cpc	r21, r1
 ca6:	80 f0       	brcs	.+32     	; 0xcc8 <__mulsf3_pse+0xa0>
 ca8:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__fp_inf>
 cac:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__fp_szero>
 cb0:	5f 3f       	cpi	r21, 0xFF	; 255
 cb2:	e4 f3       	brlt	.-8      	; 0xcac <__mulsf3_pse+0x84>
 cb4:	98 3e       	cpi	r25, 0xE8	; 232
 cb6:	d4 f3       	brlt	.-12     	; 0xcac <__mulsf3_pse+0x84>
 cb8:	86 95       	lsr	r24
 cba:	77 95       	ror	r23
 cbc:	67 95       	ror	r22
 cbe:	b7 95       	ror	r27
 cc0:	f7 95       	ror	r31
 cc2:	e7 95       	ror	r30
 cc4:	9f 5f       	subi	r25, 0xFF	; 255
 cc6:	c1 f7       	brne	.-16     	; 0xcb8 <__mulsf3_pse+0x90>
 cc8:	fe 2b       	or	r31, r30
 cca:	88 0f       	add	r24, r24
 ccc:	91 1d       	adc	r25, r1
 cce:	96 95       	lsr	r25
 cd0:	87 95       	ror	r24
 cd2:	97 f9       	bld	r25, 7
 cd4:	08 95       	ret

00000cd6 <__divmodhi4>:
 cd6:	97 fb       	bst	r25, 7
 cd8:	07 2e       	mov	r0, r23
 cda:	16 f4       	brtc	.+4      	; 0xce0 <__divmodhi4+0xa>
 cdc:	00 94       	com	r0
 cde:	07 d0       	rcall	.+14     	; 0xcee <__divmodhi4_neg1>
 ce0:	77 fd       	sbrc	r23, 7
 ce2:	09 d0       	rcall	.+18     	; 0xcf6 <__divmodhi4_neg2>
 ce4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__udivmodhi4>
 ce8:	07 fc       	sbrc	r0, 7
 cea:	05 d0       	rcall	.+10     	; 0xcf6 <__divmodhi4_neg2>
 cec:	3e f4       	brtc	.+14     	; 0xcfc <__divmodhi4_exit>

00000cee <__divmodhi4_neg1>:
 cee:	90 95       	com	r25
 cf0:	81 95       	neg	r24
 cf2:	9f 4f       	sbci	r25, 0xFF	; 255
 cf4:	08 95       	ret

00000cf6 <__divmodhi4_neg2>:
 cf6:	70 95       	com	r23
 cf8:	61 95       	neg	r22
 cfa:	7f 4f       	sbci	r23, 0xFF	; 255

00000cfc <__divmodhi4_exit>:
 cfc:	08 95       	ret

00000cfe <__umulhisi3>:
 cfe:	a2 9f       	mul	r26, r18
 d00:	b0 01       	movw	r22, r0
 d02:	b3 9f       	mul	r27, r19
 d04:	c0 01       	movw	r24, r0
 d06:	a3 9f       	mul	r26, r19
 d08:	70 0d       	add	r23, r0
 d0a:	81 1d       	adc	r24, r1
 d0c:	11 24       	eor	r1, r1
 d0e:	91 1d       	adc	r25, r1
 d10:	b2 9f       	mul	r27, r18
 d12:	70 0d       	add	r23, r0
 d14:	81 1d       	adc	r24, r1
 d16:	11 24       	eor	r1, r1
 d18:	91 1d       	adc	r25, r1
 d1a:	08 95       	ret

00000d1c <__udivmodhi4>:
 d1c:	aa 1b       	sub	r26, r26
 d1e:	bb 1b       	sub	r27, r27
 d20:	51 e1       	ldi	r21, 0x11	; 17
 d22:	07 c0       	rjmp	.+14     	; 0xd32 <__udivmodhi4_ep>

00000d24 <__udivmodhi4_loop>:
 d24:	aa 1f       	adc	r26, r26
 d26:	bb 1f       	adc	r27, r27
 d28:	a6 17       	cp	r26, r22
 d2a:	b7 07       	cpc	r27, r23
 d2c:	10 f0       	brcs	.+4      	; 0xd32 <__udivmodhi4_ep>
 d2e:	a6 1b       	sub	r26, r22
 d30:	b7 0b       	sbc	r27, r23

00000d32 <__udivmodhi4_ep>:
 d32:	88 1f       	adc	r24, r24
 d34:	99 1f       	adc	r25, r25
 d36:	5a 95       	dec	r21
 d38:	a9 f7       	brne	.-22     	; 0xd24 <__udivmodhi4_loop>
 d3a:	80 95       	com	r24
 d3c:	90 95       	com	r25
 d3e:	bc 01       	movw	r22, r24
 d40:	cd 01       	movw	r24, r26
 d42:	08 95       	ret

00000d44 <_exit>:
 d44:	f8 94       	cli

00000d46 <__stop_program>:
 d46:	ff cf       	rjmp	.-2      	; 0xd46 <__stop_program>
